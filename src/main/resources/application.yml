# Copyright (c) 2015 SONATA-NFV, 2019 5GTANGO [, ANY ADDITIONAL AFFILIATION]
# ALL RIGHTS RESERVED.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Neither the name of the SONATA-NFV, 5GTANGO [, ANY ADDITIONAL AFFILIATION]
# nor the names of its contributors may be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# This work has been performed in the framework of the SONATA project,
# funded by the European Commission under Grant number 671517 through
# the Horizon 2020 and 5G-PPP programmes. The authors would like to
# acknowledge the contributions of their colleagues of the SONATA
# partner consortium (www.sonata-nfv.eu).
#
# This work has been performed in the framework of the 5GTANGO project,
# funded by the European Commission under Grant number 761493 through
# the Horizon 2020 and 5G-PPP programmes. The authors would like to
# acknowledge the contributions of their colleagues of the 5GTANGO
# partner consortium (www.5gtango.eu).

server:
  port: 6100
api:
  name: tng-vnv-planner
  description: An H2020 5GTANGO project
  version: 0.0.1
  host: tng-vnv-planner:6100
  terms.url: https://5gtango.eu/
  license:
    name: Apache License 2.0
    url: https://github.com/sonata-nfv/tng-vnv-planner/blob/master/LICENSE

logging:
  pattern:
    file: msg%n
    console: msg%n

app:
  gatekeeper:
    base.url: http://${CAT_VNV_HOST:localhost}:${CAT_VNV_PORT:6100}/catalogues
    service.list.endpoint: ${app.gatekeeper.base.url}/network-services
    service.metadata.endpoint: ${app.gatekeeper.base.url}/network-services/{uuid}
    package.list.endpoint: ${app.gatekeeper.base.url}/packages
    package.metadata.endpoint: ${app.gatekeeper.base.url}/packages/{packageId}
    test.list.endpoint: ${app.gatekeeper.base.url}/tests
    test.metadata.endpoint: ${app.gatekeeper.base.url}/tests/{uuid}
  curator:
    host: tng-vnv-curator
    base.url: http://${CURATOR_HOST:localhost}:${CURATOR_PORT:6100}/api/v1
    test.plan.prepare.endpoint: ${app.curator.base.url}/test-preparations
    test.plan.cancel.endpoint: ${app.curator.base.url}/test-preparations/{uuid}
  postgres:
    host: ${DATABASE_HOST:localhost}

  queue.capacity: 500
  pool:
    size:
      core: 10
      max: 20

# STATIC MESSAGES:
  NOT_MATCHING_TEST_TAGS: '[NOT MATCHING TEST TAGS]'
  NOT_AVAILABLE_DATA: '[NOT AVAILABLE DATA]'

---
spring:
  profiles: docker
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}?createDatabaseIfNotExist=true
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD}
    testWhileIdle: true
    validationQuery: SELECT 1
    platform: postgres
    initialization-mode: always
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    open-in-view: false
    generate-ddl: false
    properties:
      hibernate:
        temp:
          use_jdbc_metadata_defaults: false
  jackson:
    property-naming-strategy: SNAKE_CASE

---
spring:
  profiles: test
  datasource:
    url: jdbc:h2:mem:planner
    username: sonatatest
    password: sonata
    driver-class-name: org.h2.Driver
  jpa:
    show-sql: false
    hibernate.ddl-auto: create
  h2.console.enabled: true
  jackson:
    property-naming-strategy: SNAKE_CASE